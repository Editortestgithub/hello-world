/*
 * Swagger Petstore
 *
 * ****This is a sample Petstore server.  You can find out more about Swagger at dgdgdgdfg [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Get all items
        /// </summary>
        /// <remarks>This operation supports pagination</remarks>
        /// <param name="offset">The number of items to skip before returning the results</param>
        /// <param name="limit">The number of items to return</param>
        /// <response code="200">A list of items</response>
        /// <response code="0">An error occurred</response>
        [HttpGet]
        [Route("/Editororgone/1213/1.0.0/store/inventory")]
        [ValidateModelState]
        [SwaggerOperation("StoreInventoryGet")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorModel), description: "An error occurred")]
        public virtual IActionResult StoreInventoryGet([FromQuery]int? offset, [FromQuery][Range(1, 100)]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorModel));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add a new item
        /// </summary>
        /// <param name="body">A JSON object containing item data</param>
        /// <response code="201">Created</response>
        [HttpPost]
        [Route("/Editororgone/1213/1.0.0/store/inventory")]
        [ValidateModelState]
        [SwaggerOperation("StoreInventoryPost")]
        public virtual IActionResult StoreInventoryPost([FromBody]Object body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("/Editororgone/1213/1.0.0/subscribe")]
        [ValidateModelState]
        [SwaggerOperation("SubscribePost")]
        public virtual IActionResult SubscribePost()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
